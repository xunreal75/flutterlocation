// Autogenerated from Pigeon (v10.1.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.lyokone.location;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class GeneratedAndroidLocation {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  public enum PigeonLocationAccuracy {
    POWER_SAVE(0),
    LOW(1),
    BALANCED(2),
    HIGH(3),
    NAVIGATION(4);

    final int index;

    private PigeonLocationAccuracy(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PigeonLocationData {
    private @Nullable Double latitude;

    public @Nullable Double getLatitude() {
      return latitude;
    }

    public void setLatitude(@Nullable Double setterArg) {
      this.latitude = setterArg;
    }

    private @Nullable Double longitude;

    public @Nullable Double getLongitude() {
      return longitude;
    }

    public void setLongitude(@Nullable Double setterArg) {
      this.longitude = setterArg;
    }

    private @Nullable Double accuracy;

    public @Nullable Double getAccuracy() {
      return accuracy;
    }

    public void setAccuracy(@Nullable Double setterArg) {
      this.accuracy = setterArg;
    }

    private @Nullable Double altitude;

    public @Nullable Double getAltitude() {
      return altitude;
    }

    public void setAltitude(@Nullable Double setterArg) {
      this.altitude = setterArg;
    }

    private @Nullable Double bearing;

    public @Nullable Double getBearing() {
      return bearing;
    }

    public void setBearing(@Nullable Double setterArg) {
      this.bearing = setterArg;
    }

    private @Nullable Double bearingAccuracyDegrees;

    public @Nullable Double getBearingAccuracyDegrees() {
      return bearingAccuracyDegrees;
    }

    public void setBearingAccuracyDegrees(@Nullable Double setterArg) {
      this.bearingAccuracyDegrees = setterArg;
    }

    private @Nullable Double elaspedRealTimeNanos;

    public @Nullable Double getElaspedRealTimeNanos() {
      return elaspedRealTimeNanos;
    }

    public void setElaspedRealTimeNanos(@Nullable Double setterArg) {
      this.elaspedRealTimeNanos = setterArg;
    }

    private @Nullable Double elaspedRealTimeUncertaintyNanos;

    public @Nullable Double getElaspedRealTimeUncertaintyNanos() {
      return elaspedRealTimeUncertaintyNanos;
    }

    public void setElaspedRealTimeUncertaintyNanos(@Nullable Double setterArg) {
      this.elaspedRealTimeUncertaintyNanos = setterArg;
    }

    private @Nullable Long satellites;

    public @Nullable Long getSatellites() {
      return satellites;
    }

    public void setSatellites(@Nullable Long setterArg) {
      this.satellites = setterArg;
    }

    private @Nullable Double speed;

    public @Nullable Double getSpeed() {
      return speed;
    }

    public void setSpeed(@Nullable Double setterArg) {
      this.speed = setterArg;
    }

    private @Nullable Double speedAccuracy;

    public @Nullable Double getSpeedAccuracy() {
      return speedAccuracy;
    }

    public void setSpeedAccuracy(@Nullable Double setterArg) {
      this.speedAccuracy = setterArg;
    }

    private @Nullable Double time;

    public @Nullable Double getTime() {
      return time;
    }

    public void setTime(@Nullable Double setterArg) {
      this.time = setterArg;
    }

    private @Nullable Double verticalAccuracy;

    public @Nullable Double getVerticalAccuracy() {
      return verticalAccuracy;
    }

    public void setVerticalAccuracy(@Nullable Double setterArg) {
      this.verticalAccuracy = setterArg;
    }

    private @Nullable Boolean isMock;

    public @Nullable Boolean getIsMock() {
      return isMock;
    }

    public void setIsMock(@Nullable Boolean setterArg) {
      this.isMock = setterArg;
    }

    public static final class Builder {

      private @Nullable Double latitude;

      public @NonNull Builder setLatitude(@Nullable Double setterArg) {
        this.latitude = setterArg;
        return this;
      }

      private @Nullable Double longitude;

      public @NonNull Builder setLongitude(@Nullable Double setterArg) {
        this.longitude = setterArg;
        return this;
      }

      private @Nullable Double accuracy;

      public @NonNull Builder setAccuracy(@Nullable Double setterArg) {
        this.accuracy = setterArg;
        return this;
      }

      private @Nullable Double altitude;

      public @NonNull Builder setAltitude(@Nullable Double setterArg) {
        this.altitude = setterArg;
        return this;
      }

      private @Nullable Double bearing;

      public @NonNull Builder setBearing(@Nullable Double setterArg) {
        this.bearing = setterArg;
        return this;
      }

      private @Nullable Double bearingAccuracyDegrees;

      public @NonNull Builder setBearingAccuracyDegrees(@Nullable Double setterArg) {
        this.bearingAccuracyDegrees = setterArg;
        return this;
      }

      private @Nullable Double elaspedRealTimeNanos;

      public @NonNull Builder setElaspedRealTimeNanos(@Nullable Double setterArg) {
        this.elaspedRealTimeNanos = setterArg;
        return this;
      }

      private @Nullable Double elaspedRealTimeUncertaintyNanos;

      public @NonNull Builder setElaspedRealTimeUncertaintyNanos(@Nullable Double setterArg) {
        this.elaspedRealTimeUncertaintyNanos = setterArg;
        return this;
      }

      private @Nullable Long satellites;

      public @NonNull Builder setSatellites(@Nullable Long setterArg) {
        this.satellites = setterArg;
        return this;
      }

      private @Nullable Double speed;

      public @NonNull Builder setSpeed(@Nullable Double setterArg) {
        this.speed = setterArg;
        return this;
      }

      private @Nullable Double speedAccuracy;

      public @NonNull Builder setSpeedAccuracy(@Nullable Double setterArg) {
        this.speedAccuracy = setterArg;
        return this;
      }

      private @Nullable Double time;

      public @NonNull Builder setTime(@Nullable Double setterArg) {
        this.time = setterArg;
        return this;
      }

      private @Nullable Double verticalAccuracy;

      public @NonNull Builder setVerticalAccuracy(@Nullable Double setterArg) {
        this.verticalAccuracy = setterArg;
        return this;
      }

      private @Nullable Boolean isMock;

      public @NonNull Builder setIsMock(@Nullable Boolean setterArg) {
        this.isMock = setterArg;
        return this;
      }

      public @NonNull PigeonLocationData build() {
        PigeonLocationData pigeonReturn = new PigeonLocationData();
        pigeonReturn.setLatitude(latitude);
        pigeonReturn.setLongitude(longitude);
        pigeonReturn.setAccuracy(accuracy);
        pigeonReturn.setAltitude(altitude);
        pigeonReturn.setBearing(bearing);
        pigeonReturn.setBearingAccuracyDegrees(bearingAccuracyDegrees);
        pigeonReturn.setElaspedRealTimeNanos(elaspedRealTimeNanos);
        pigeonReturn.setElaspedRealTimeUncertaintyNanos(elaspedRealTimeUncertaintyNanos);
        pigeonReturn.setSatellites(satellites);
        pigeonReturn.setSpeed(speed);
        pigeonReturn.setSpeedAccuracy(speedAccuracy);
        pigeonReturn.setTime(time);
        pigeonReturn.setVerticalAccuracy(verticalAccuracy);
        pigeonReturn.setIsMock(isMock);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(14);
      toListResult.add(latitude);
      toListResult.add(longitude);
      toListResult.add(accuracy);
      toListResult.add(altitude);
      toListResult.add(bearing);
      toListResult.add(bearingAccuracyDegrees);
      toListResult.add(elaspedRealTimeNanos);
      toListResult.add(elaspedRealTimeUncertaintyNanos);
      toListResult.add(satellites);
      toListResult.add(speed);
      toListResult.add(speedAccuracy);
      toListResult.add(time);
      toListResult.add(verticalAccuracy);
      toListResult.add(isMock);
      return toListResult;
    }

    static @NonNull PigeonLocationData fromList(@NonNull ArrayList<Object> list) {
      PigeonLocationData pigeonResult = new PigeonLocationData();
      Object latitude = list.get(0);
      pigeonResult.setLatitude((Double) latitude);
      Object longitude = list.get(1);
      pigeonResult.setLongitude((Double) longitude);
      Object accuracy = list.get(2);
      pigeonResult.setAccuracy((Double) accuracy);
      Object altitude = list.get(3);
      pigeonResult.setAltitude((Double) altitude);
      Object bearing = list.get(4);
      pigeonResult.setBearing((Double) bearing);
      Object bearingAccuracyDegrees = list.get(5);
      pigeonResult.setBearingAccuracyDegrees((Double) bearingAccuracyDegrees);
      Object elaspedRealTimeNanos = list.get(6);
      pigeonResult.setElaspedRealTimeNanos((Double) elaspedRealTimeNanos);
      Object elaspedRealTimeUncertaintyNanos = list.get(7);
      pigeonResult.setElaspedRealTimeUncertaintyNanos((Double) elaspedRealTimeUncertaintyNanos);
      Object satellites = list.get(8);
      pigeonResult.setSatellites((satellites == null) ? null : ((satellites instanceof Integer) ? (Integer) satellites : (Long) satellites));
      Object speed = list.get(9);
      pigeonResult.setSpeed((Double) speed);
      Object speedAccuracy = list.get(10);
      pigeonResult.setSpeedAccuracy((Double) speedAccuracy);
      Object time = list.get(11);
      pigeonResult.setTime((Double) time);
      Object verticalAccuracy = list.get(12);
      pigeonResult.setVerticalAccuracy((Double) verticalAccuracy);
      Object isMock = list.get(13);
      pigeonResult.setIsMock((Boolean) isMock);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PigeonNotificationSettings {
    private @Nullable String channelName;

    public @Nullable String getChannelName() {
      return channelName;
    }

    public void setChannelName(@Nullable String setterArg) {
      this.channelName = setterArg;
    }

    private @Nullable String title;

    public @Nullable String getTitle() {
      return title;
    }

    public void setTitle(@Nullable String setterArg) {
      this.title = setterArg;
    }

    private @Nullable String iconName;

    public @Nullable String getIconName() {
      return iconName;
    }

    public void setIconName(@Nullable String setterArg) {
      this.iconName = setterArg;
    }

    private @Nullable String subtitle;

    public @Nullable String getSubtitle() {
      return subtitle;
    }

    public void setSubtitle(@Nullable String setterArg) {
      this.subtitle = setterArg;
    }

    private @Nullable String description;

    public @Nullable String getDescription() {
      return description;
    }

    public void setDescription(@Nullable String setterArg) {
      this.description = setterArg;
    }

    private @Nullable String color;

    public @Nullable String getColor() {
      return color;
    }

    public void setColor(@Nullable String setterArg) {
      this.color = setterArg;
    }

    private @Nullable Boolean onTapBringToFront;

    public @Nullable Boolean getOnTapBringToFront() {
      return onTapBringToFront;
    }

    public void setOnTapBringToFront(@Nullable Boolean setterArg) {
      this.onTapBringToFront = setterArg;
    }

    public static final class Builder {

      private @Nullable String channelName;

      public @NonNull Builder setChannelName(@Nullable String setterArg) {
        this.channelName = setterArg;
        return this;
      }

      private @Nullable String title;

      public @NonNull Builder setTitle(@Nullable String setterArg) {
        this.title = setterArg;
        return this;
      }

      private @Nullable String iconName;

      public @NonNull Builder setIconName(@Nullable String setterArg) {
        this.iconName = setterArg;
        return this;
      }

      private @Nullable String subtitle;

      public @NonNull Builder setSubtitle(@Nullable String setterArg) {
        this.subtitle = setterArg;
        return this;
      }

      private @Nullable String description;

      public @NonNull Builder setDescription(@Nullable String setterArg) {
        this.description = setterArg;
        return this;
      }

      private @Nullable String color;

      public @NonNull Builder setColor(@Nullable String setterArg) {
        this.color = setterArg;
        return this;
      }

      private @Nullable Boolean onTapBringToFront;

      public @NonNull Builder setOnTapBringToFront(@Nullable Boolean setterArg) {
        this.onTapBringToFront = setterArg;
        return this;
      }

      public @NonNull PigeonNotificationSettings build() {
        PigeonNotificationSettings pigeonReturn = new PigeonNotificationSettings();
        pigeonReturn.setChannelName(channelName);
        pigeonReturn.setTitle(title);
        pigeonReturn.setIconName(iconName);
        pigeonReturn.setSubtitle(subtitle);
        pigeonReturn.setDescription(description);
        pigeonReturn.setColor(color);
        pigeonReturn.setOnTapBringToFront(onTapBringToFront);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(7);
      toListResult.add(channelName);
      toListResult.add(title);
      toListResult.add(iconName);
      toListResult.add(subtitle);
      toListResult.add(description);
      toListResult.add(color);
      toListResult.add(onTapBringToFront);
      return toListResult;
    }

    static @NonNull PigeonNotificationSettings fromList(@NonNull ArrayList<Object> list) {
      PigeonNotificationSettings pigeonResult = new PigeonNotificationSettings();
      Object channelName = list.get(0);
      pigeonResult.setChannelName((String) channelName);
      Object title = list.get(1);
      pigeonResult.setTitle((String) title);
      Object iconName = list.get(2);
      pigeonResult.setIconName((String) iconName);
      Object subtitle = list.get(3);
      pigeonResult.setSubtitle((String) subtitle);
      Object description = list.get(4);
      pigeonResult.setDescription((String) description);
      Object color = list.get(5);
      pigeonResult.setColor((String) color);
      Object onTapBringToFront = list.get(6);
      pigeonResult.setOnTapBringToFront((Boolean) onTapBringToFront);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PigeonLocationSettings {
    private @NonNull Boolean askForPermission;

    public @NonNull Boolean getAskForPermission() {
      return askForPermission;
    }

    public void setAskForPermission(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"askForPermission\" is null.");
      }
      this.askForPermission = setterArg;
    }

    private @NonNull String rationaleMessageForPermissionRequest;

    public @NonNull String getRationaleMessageForPermissionRequest() {
      return rationaleMessageForPermissionRequest;
    }

    public void setRationaleMessageForPermissionRequest(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"rationaleMessageForPermissionRequest\" is null.");
      }
      this.rationaleMessageForPermissionRequest = setterArg;
    }

    private @NonNull String rationaleMessageForGPSRequest;

    public @NonNull String getRationaleMessageForGPSRequest() {
      return rationaleMessageForGPSRequest;
    }

    public void setRationaleMessageForGPSRequest(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"rationaleMessageForGPSRequest\" is null.");
      }
      this.rationaleMessageForGPSRequest = setterArg;
    }

    private @NonNull Boolean useGooglePlayServices;

    public @NonNull Boolean getUseGooglePlayServices() {
      return useGooglePlayServices;
    }

    public void setUseGooglePlayServices(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"useGooglePlayServices\" is null.");
      }
      this.useGooglePlayServices = setterArg;
    }

    private @NonNull Boolean askForGooglePlayServices;

    public @NonNull Boolean getAskForGooglePlayServices() {
      return askForGooglePlayServices;
    }

    public void setAskForGooglePlayServices(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"askForGooglePlayServices\" is null.");
      }
      this.askForGooglePlayServices = setterArg;
    }

    private @NonNull Boolean askForGPS;

    public @NonNull Boolean getAskForGPS() {
      return askForGPS;
    }

    public void setAskForGPS(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"askForGPS\" is null.");
      }
      this.askForGPS = setterArg;
    }

    private @NonNull Boolean fallbackToGPS;

    public @NonNull Boolean getFallbackToGPS() {
      return fallbackToGPS;
    }

    public void setFallbackToGPS(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"fallbackToGPS\" is null.");
      }
      this.fallbackToGPS = setterArg;
    }

    private @NonNull Boolean ignoreLastKnownPosition;

    public @NonNull Boolean getIgnoreLastKnownPosition() {
      return ignoreLastKnownPosition;
    }

    public void setIgnoreLastKnownPosition(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"ignoreLastKnownPosition\" is null.");
      }
      this.ignoreLastKnownPosition = setterArg;
    }

    private @Nullable Double expirationDuration;

    public @Nullable Double getExpirationDuration() {
      return expirationDuration;
    }

    public void setExpirationDuration(@Nullable Double setterArg) {
      this.expirationDuration = setterArg;
    }

    private @Nullable Double expirationTime;

    public @Nullable Double getExpirationTime() {
      return expirationTime;
    }

    public void setExpirationTime(@Nullable Double setterArg) {
      this.expirationTime = setterArg;
    }

    private @NonNull Double fastestInterval;

    public @NonNull Double getFastestInterval() {
      return fastestInterval;
    }

    public void setFastestInterval(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"fastestInterval\" is null.");
      }
      this.fastestInterval = setterArg;
    }

    private @NonNull Double interval;

    public @NonNull Double getInterval() {
      return interval;
    }

    public void setInterval(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"interval\" is null.");
      }
      this.interval = setterArg;
    }

    private @Nullable Double maxWaitTime;

    public @Nullable Double getMaxWaitTime() {
      return maxWaitTime;
    }

    public void setMaxWaitTime(@Nullable Double setterArg) {
      this.maxWaitTime = setterArg;
    }

    private @Nullable Long numUpdates;

    public @Nullable Long getNumUpdates() {
      return numUpdates;
    }

    public void setNumUpdates(@Nullable Long setterArg) {
      this.numUpdates = setterArg;
    }

    private @NonNull PigeonLocationAccuracy accuracy;

    public @NonNull PigeonLocationAccuracy getAccuracy() {
      return accuracy;
    }

    public void setAccuracy(@NonNull PigeonLocationAccuracy setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"accuracy\" is null.");
      }
      this.accuracy = setterArg;
    }

    private @NonNull Double smallestDisplacement;

    public @NonNull Double getSmallestDisplacement() {
      return smallestDisplacement;
    }

    public void setSmallestDisplacement(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"smallestDisplacement\" is null.");
      }
      this.smallestDisplacement = setterArg;
    }

    private @NonNull Boolean waitForAccurateLocation;

    public @NonNull Boolean getWaitForAccurateLocation() {
      return waitForAccurateLocation;
    }

    public void setWaitForAccurateLocation(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"waitForAccurateLocation\" is null.");
      }
      this.waitForAccurateLocation = setterArg;
    }

    private @Nullable Double acceptableAccuracy;

    public @Nullable Double getAcceptableAccuracy() {
      return acceptableAccuracy;
    }

    public void setAcceptableAccuracy(@Nullable Double setterArg) {
      this.acceptableAccuracy = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PigeonLocationSettings() {}

    public static final class Builder {

      private @Nullable Boolean askForPermission;

      public @NonNull Builder setAskForPermission(@NonNull Boolean setterArg) {
        this.askForPermission = setterArg;
        return this;
      }

      private @Nullable String rationaleMessageForPermissionRequest;

      public @NonNull Builder setRationaleMessageForPermissionRequest(@NonNull String setterArg) {
        this.rationaleMessageForPermissionRequest = setterArg;
        return this;
      }

      private @Nullable String rationaleMessageForGPSRequest;

      public @NonNull Builder setRationaleMessageForGPSRequest(@NonNull String setterArg) {
        this.rationaleMessageForGPSRequest = setterArg;
        return this;
      }

      private @Nullable Boolean useGooglePlayServices;

      public @NonNull Builder setUseGooglePlayServices(@NonNull Boolean setterArg) {
        this.useGooglePlayServices = setterArg;
        return this;
      }

      private @Nullable Boolean askForGooglePlayServices;

      public @NonNull Builder setAskForGooglePlayServices(@NonNull Boolean setterArg) {
        this.askForGooglePlayServices = setterArg;
        return this;
      }

      private @Nullable Boolean askForGPS;

      public @NonNull Builder setAskForGPS(@NonNull Boolean setterArg) {
        this.askForGPS = setterArg;
        return this;
      }

      private @Nullable Boolean fallbackToGPS;

      public @NonNull Builder setFallbackToGPS(@NonNull Boolean setterArg) {
        this.fallbackToGPS = setterArg;
        return this;
      }

      private @Nullable Boolean ignoreLastKnownPosition;

      public @NonNull Builder setIgnoreLastKnownPosition(@NonNull Boolean setterArg) {
        this.ignoreLastKnownPosition = setterArg;
        return this;
      }

      private @Nullable Double expirationDuration;

      public @NonNull Builder setExpirationDuration(@Nullable Double setterArg) {
        this.expirationDuration = setterArg;
        return this;
      }

      private @Nullable Double expirationTime;

      public @NonNull Builder setExpirationTime(@Nullable Double setterArg) {
        this.expirationTime = setterArg;
        return this;
      }

      private @Nullable Double fastestInterval;

      public @NonNull Builder setFastestInterval(@NonNull Double setterArg) {
        this.fastestInterval = setterArg;
        return this;
      }

      private @Nullable Double interval;

      public @NonNull Builder setInterval(@NonNull Double setterArg) {
        this.interval = setterArg;
        return this;
      }

      private @Nullable Double maxWaitTime;

      public @NonNull Builder setMaxWaitTime(@Nullable Double setterArg) {
        this.maxWaitTime = setterArg;
        return this;
      }

      private @Nullable Long numUpdates;

      public @NonNull Builder setNumUpdates(@Nullable Long setterArg) {
        this.numUpdates = setterArg;
        return this;
      }

      private @Nullable PigeonLocationAccuracy accuracy;

      public @NonNull Builder setAccuracy(@NonNull PigeonLocationAccuracy setterArg) {
        this.accuracy = setterArg;
        return this;
      }

      private @Nullable Double smallestDisplacement;

      public @NonNull Builder setSmallestDisplacement(@NonNull Double setterArg) {
        this.smallestDisplacement = setterArg;
        return this;
      }

      private @Nullable Boolean waitForAccurateLocation;

      public @NonNull Builder setWaitForAccurateLocation(@NonNull Boolean setterArg) {
        this.waitForAccurateLocation = setterArg;
        return this;
      }

      private @Nullable Double acceptableAccuracy;

      public @NonNull Builder setAcceptableAccuracy(@Nullable Double setterArg) {
        this.acceptableAccuracy = setterArg;
        return this;
      }

      public @NonNull PigeonLocationSettings build() {
        PigeonLocationSettings pigeonReturn = new PigeonLocationSettings();
        pigeonReturn.setAskForPermission(askForPermission);
        pigeonReturn.setRationaleMessageForPermissionRequest(rationaleMessageForPermissionRequest);
        pigeonReturn.setRationaleMessageForGPSRequest(rationaleMessageForGPSRequest);
        pigeonReturn.setUseGooglePlayServices(useGooglePlayServices);
        pigeonReturn.setAskForGooglePlayServices(askForGooglePlayServices);
        pigeonReturn.setAskForGPS(askForGPS);
        pigeonReturn.setFallbackToGPS(fallbackToGPS);
        pigeonReturn.setIgnoreLastKnownPosition(ignoreLastKnownPosition);
        pigeonReturn.setExpirationDuration(expirationDuration);
        pigeonReturn.setExpirationTime(expirationTime);
        pigeonReturn.setFastestInterval(fastestInterval);
        pigeonReturn.setInterval(interval);
        pigeonReturn.setMaxWaitTime(maxWaitTime);
        pigeonReturn.setNumUpdates(numUpdates);
        pigeonReturn.setAccuracy(accuracy);
        pigeonReturn.setSmallestDisplacement(smallestDisplacement);
        pigeonReturn.setWaitForAccurateLocation(waitForAccurateLocation);
        pigeonReturn.setAcceptableAccuracy(acceptableAccuracy);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(18);
      toListResult.add(askForPermission);
      toListResult.add(rationaleMessageForPermissionRequest);
      toListResult.add(rationaleMessageForGPSRequest);
      toListResult.add(useGooglePlayServices);
      toListResult.add(askForGooglePlayServices);
      toListResult.add(askForGPS);
      toListResult.add(fallbackToGPS);
      toListResult.add(ignoreLastKnownPosition);
      toListResult.add(expirationDuration);
      toListResult.add(expirationTime);
      toListResult.add(fastestInterval);
      toListResult.add(interval);
      toListResult.add(maxWaitTime);
      toListResult.add(numUpdates);
      toListResult.add(accuracy == null ? null : accuracy.index);
      toListResult.add(smallestDisplacement);
      toListResult.add(waitForAccurateLocation);
      toListResult.add(acceptableAccuracy);
      return toListResult;
    }

    static @NonNull PigeonLocationSettings fromList(@NonNull ArrayList<Object> list) {
      PigeonLocationSettings pigeonResult = new PigeonLocationSettings();
      Object askForPermission = list.get(0);
      pigeonResult.setAskForPermission((Boolean) askForPermission);
      Object rationaleMessageForPermissionRequest = list.get(1);
      pigeonResult.setRationaleMessageForPermissionRequest((String) rationaleMessageForPermissionRequest);
      Object rationaleMessageForGPSRequest = list.get(2);
      pigeonResult.setRationaleMessageForGPSRequest((String) rationaleMessageForGPSRequest);
      Object useGooglePlayServices = list.get(3);
      pigeonResult.setUseGooglePlayServices((Boolean) useGooglePlayServices);
      Object askForGooglePlayServices = list.get(4);
      pigeonResult.setAskForGooglePlayServices((Boolean) askForGooglePlayServices);
      Object askForGPS = list.get(5);
      pigeonResult.setAskForGPS((Boolean) askForGPS);
      Object fallbackToGPS = list.get(6);
      pigeonResult.setFallbackToGPS((Boolean) fallbackToGPS);
      Object ignoreLastKnownPosition = list.get(7);
      pigeonResult.setIgnoreLastKnownPosition((Boolean) ignoreLastKnownPosition);
      Object expirationDuration = list.get(8);
      pigeonResult.setExpirationDuration((Double) expirationDuration);
      Object expirationTime = list.get(9);
      pigeonResult.setExpirationTime((Double) expirationTime);
      Object fastestInterval = list.get(10);
      pigeonResult.setFastestInterval((Double) fastestInterval);
      Object interval = list.get(11);
      pigeonResult.setInterval((Double) interval);
      Object maxWaitTime = list.get(12);
      pigeonResult.setMaxWaitTime((Double) maxWaitTime);
      Object numUpdates = list.get(13);
      pigeonResult.setNumUpdates((numUpdates == null) ? null : ((numUpdates instanceof Integer) ? (Integer) numUpdates : (Long) numUpdates));
      Object accuracy = list.get(14);
      pigeonResult.setAccuracy(accuracy == null ? null : PigeonLocationAccuracy.values()[(int) accuracy]);
      Object smallestDisplacement = list.get(15);
      pigeonResult.setSmallestDisplacement((Double) smallestDisplacement);
      Object waitForAccurateLocation = list.get(16);
      pigeonResult.setWaitForAccurateLocation((Boolean) waitForAccurateLocation);
      Object acceptableAccuracy = list.get(17);
      pigeonResult.setAcceptableAccuracy((Double) acceptableAccuracy);
      return pigeonResult;
    }
  }

  public interface Result<T> {
    @SuppressWarnings("UnknownNullness")
    void success(T result);

    void error(@NonNull Throwable error);
  }

  private static class LocationHostApiCodec extends StandardMessageCodec {
    public static final LocationHostApiCodec INSTANCE = new LocationHostApiCodec();

    private LocationHostApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return PigeonLocationData.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return PigeonLocationSettings.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return PigeonLocationSettings.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 131:
          return PigeonNotificationSettings.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof PigeonLocationData) {
        stream.write(128);
        writeValue(stream, ((PigeonLocationData) value).toList());
      } else if (value instanceof PigeonLocationSettings) {
        stream.write(129);
        writeValue(stream, ((PigeonLocationSettings) value).toList());
      } else if (value instanceof PigeonLocationSettings) {
        stream.write(130);
        writeValue(stream, ((PigeonLocationSettings) value).toList());
      } else if (value instanceof PigeonNotificationSettings) {
        stream.write(131);
        writeValue(stream, ((PigeonNotificationSettings) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface LocationHostApi {

    void getLocation(@Nullable PigeonLocationSettings settings, @NonNull Result<PigeonLocationData> result);

    @NonNull 
    Boolean setLocationSettings(@NonNull PigeonLocationSettings settings);

    @NonNull 
    Long getPermissionStatus();

    void requestPermission(@NonNull Result<Long> result);

    @NonNull 
    Boolean isGPSEnabled();

    @NonNull 
    Boolean isNetworkEnabled();

    @NonNull 
    Boolean changeNotificationSettings(@NonNull PigeonNotificationSettings settings);

    @NonNull 
    Boolean setBackgroundActivated(@NonNull Boolean activated);

    /** The codec used by LocationHostApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return LocationHostApiCodec.INSTANCE;
    }
    /**Sets up an instance of `LocationHostApi` to handle messages through the `binaryMessenger`. */
    static void setup(@NonNull BinaryMessenger binaryMessenger, @Nullable LocationHostApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.LocationHostApi.getLocation", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                PigeonLocationSettings settingsArg = (PigeonLocationSettings) args.get(0);
                Result<PigeonLocationData> resultCallback =
                    new Result<PigeonLocationData>() {
                      public void success(PigeonLocationData result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getLocation(settingsArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.LocationHostApi.setLocationSettings", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                PigeonLocationSettings settingsArg = (PigeonLocationSettings) args.get(0);
                try {
                  Boolean output = api.setLocationSettings(settingsArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.LocationHostApi.getPermissionStatus", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Long output = api.getPermissionStatus();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.LocationHostApi.requestPermission", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<Long> resultCallback =
                    new Result<Long>() {
                      public void success(Long result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.requestPermission(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.LocationHostApi.isGPSEnabled", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Boolean output = api.isGPSEnabled();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.LocationHostApi.isNetworkEnabled", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Boolean output = api.isNetworkEnabled();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.LocationHostApi.changeNotificationSettings", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                PigeonNotificationSettings settingsArg = (PigeonNotificationSettings) args.get(0);
                try {
                  Boolean output = api.changeNotificationSettings(settingsArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.LocationHostApi.setBackgroundActivated", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Boolean activatedArg = (Boolean) args.get(0);
                try {
                  Boolean output = api.setBackgroundActivated(activatedArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
}
