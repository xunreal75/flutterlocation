// Autogenerated from Pigeon (v10.1.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import <Foundation/Foundation.h>

@protocol FlutterBinaryMessenger;
@protocol FlutterMessageCodec;
@class FlutterError;
@class FlutterStandardTypedData;

NS_ASSUME_NONNULL_BEGIN

typedef NS_ENUM(NSUInteger, PigeonLocationAccuracy) {
  PigeonLocationAccuracyPowerSave = 0,
  PigeonLocationAccuracyLow = 1,
  PigeonLocationAccuracyBalanced = 2,
  PigeonLocationAccuracyHigh = 3,
  PigeonLocationAccuracyNavigation = 4,
};

@class PigeonLocationData;
@class PigeonNotificationSettings;
@class PigeonLocationSettings;

@interface PigeonLocationData : NSObject
+ (instancetype)makeWithLatitude:(nullable NSNumber *)latitude
    longitude:(nullable NSNumber *)longitude
    accuracy:(nullable NSNumber *)accuracy
    altitude:(nullable NSNumber *)altitude
    bearing:(nullable NSNumber *)bearing
    bearingAccuracyDegrees:(nullable NSNumber *)bearingAccuracyDegrees
    elaspedRealTimeNanos:(nullable NSNumber *)elaspedRealTimeNanos
    elaspedRealTimeUncertaintyNanos:(nullable NSNumber *)elaspedRealTimeUncertaintyNanos
    satellites:(nullable NSNumber *)satellites
    speed:(nullable NSNumber *)speed
    speedAccuracy:(nullable NSNumber *)speedAccuracy
    time:(nullable NSNumber *)time
    verticalAccuracy:(nullable NSNumber *)verticalAccuracy
    isMock:(nullable NSNumber *)isMock;
@property(nonatomic, strong, nullable) NSNumber * latitude;
@property(nonatomic, strong, nullable) NSNumber * longitude;
@property(nonatomic, strong, nullable) NSNumber * accuracy;
@property(nonatomic, strong, nullable) NSNumber * altitude;
@property(nonatomic, strong, nullable) NSNumber * bearing;
@property(nonatomic, strong, nullable) NSNumber * bearingAccuracyDegrees;
@property(nonatomic, strong, nullable) NSNumber * elaspedRealTimeNanos;
@property(nonatomic, strong, nullable) NSNumber * elaspedRealTimeUncertaintyNanos;
@property(nonatomic, strong, nullable) NSNumber * satellites;
@property(nonatomic, strong, nullable) NSNumber * speed;
@property(nonatomic, strong, nullable) NSNumber * speedAccuracy;
@property(nonatomic, strong, nullable) NSNumber * time;
@property(nonatomic, strong, nullable) NSNumber * verticalAccuracy;
@property(nonatomic, strong, nullable) NSNumber * isMock;
@end

@interface PigeonNotificationSettings : NSObject
+ (instancetype)makeWithChannelName:(nullable NSString *)channelName
    title:(nullable NSString *)title
    iconName:(nullable NSString *)iconName
    subtitle:(nullable NSString *)subtitle
    description:(nullable NSString *)description
    color:(nullable NSString *)color
    onTapBringToFront:(nullable NSNumber *)onTapBringToFront;
@property(nonatomic, copy, nullable) NSString * channelName;
@property(nonatomic, copy, nullable) NSString * title;
@property(nonatomic, copy, nullable) NSString * iconName;
@property(nonatomic, copy, nullable) NSString * subtitle;
@property(nonatomic, copy, nullable) NSString * description;
@property(nonatomic, copy, nullable) NSString * color;
@property(nonatomic, strong, nullable) NSNumber * onTapBringToFront;
@end

@interface PigeonLocationSettings : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithAskForPermission:(NSNumber *)askForPermission
    rationaleMessageForPermissionRequest:(NSString *)rationaleMessageForPermissionRequest
    rationaleMessageForGPSRequest:(NSString *)rationaleMessageForGPSRequest
    useGooglePlayServices:(NSNumber *)useGooglePlayServices
    askForGooglePlayServices:(NSNumber *)askForGooglePlayServices
    askForGPS:(NSNumber *)askForGPS
    fallbackToGPS:(NSNumber *)fallbackToGPS
    ignoreLastKnownPosition:(NSNumber *)ignoreLastKnownPosition
    expirationDuration:(nullable NSNumber *)expirationDuration
    expirationTime:(nullable NSNumber *)expirationTime
    fastestInterval:(NSNumber *)fastestInterval
    interval:(NSNumber *)interval
    maxWaitTime:(nullable NSNumber *)maxWaitTime
    numUpdates:(nullable NSNumber *)numUpdates
    accuracy:(PigeonLocationAccuracy)accuracy
    smallestDisplacement:(NSNumber *)smallestDisplacement
    waitForAccurateLocation:(NSNumber *)waitForAccurateLocation
    acceptableAccuracy:(nullable NSNumber *)acceptableAccuracy;
@property(nonatomic, strong) NSNumber * askForPermission;
@property(nonatomic, copy) NSString * rationaleMessageForPermissionRequest;
@property(nonatomic, copy) NSString * rationaleMessageForGPSRequest;
@property(nonatomic, strong) NSNumber * useGooglePlayServices;
@property(nonatomic, strong) NSNumber * askForGooglePlayServices;
@property(nonatomic, strong) NSNumber * askForGPS;
@property(nonatomic, strong) NSNumber * fallbackToGPS;
@property(nonatomic, strong) NSNumber * ignoreLastKnownPosition;
@property(nonatomic, strong, nullable) NSNumber * expirationDuration;
@property(nonatomic, strong, nullable) NSNumber * expirationTime;
@property(nonatomic, strong) NSNumber * fastestInterval;
@property(nonatomic, strong) NSNumber * interval;
@property(nonatomic, strong, nullable) NSNumber * maxWaitTime;
@property(nonatomic, strong, nullable) NSNumber * numUpdates;
@property(nonatomic, assign) PigeonLocationAccuracy accuracy;
@property(nonatomic, strong) NSNumber * smallestDisplacement;
@property(nonatomic, strong) NSNumber * waitForAccurateLocation;
@property(nonatomic, strong, nullable) NSNumber * acceptableAccuracy;
@end

/// The codec used by LocationHostApi.
NSObject<FlutterMessageCodec> *LocationHostApiGetCodec(void);

@protocol LocationHostApi
- (void)getLocationSettings:(nullable PigeonLocationSettings *)settings completion:(void (^)(PigeonLocationData *_Nullable, FlutterError *_Nullable))completion;
/// @return `nil` only when `error != nil`.
- (nullable NSNumber *)setLocationSettingsSettings:(PigeonLocationSettings *)settings error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable NSNumber *)getPermissionStatusWithError:(FlutterError *_Nullable *_Nonnull)error;
- (void)requestPermissionWithCompletion:(void (^)(NSNumber *_Nullable, FlutterError *_Nullable))completion;
/// @return `nil` only when `error != nil`.
- (nullable NSNumber *)isGPSEnabledWithError:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable NSNumber *)isNetworkEnabledWithError:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable NSNumber *)changeNotificationSettingsSettings:(PigeonNotificationSettings *)settings error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable NSNumber *)setBackgroundActivatedActivated:(NSNumber *)activated error:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void LocationHostApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<LocationHostApi> *_Nullable api);

NS_ASSUME_NONNULL_END
